Q1: Which registers contain arguments to functions? For example, which register holds 13 in main's call to `printf`?

A: 通过阅读 `call.asm` 文件中的 `main` 函数可知，调用 `printf` 函数时，`13` 被寄存器 `a2` 保存。`a1`, `a2`, `a3` 等通用寄存器；`13` 被寄存器 `a2` 保存。

Q2: Where is the call to function `f` in the assembly code for main? Where is the call to `g`? (Hint: the compiler may inline functions.)

A: `main` 的汇编代码没有调用 `f` 和 `g` 函数。编译器对其进行了优化。

Q3: At what address is the function `printf` located?

A: `0x642`

Q4: What value is in the register `ra` just after the `jalr` to `printf` in `main`?

A: `0x38`

Q5: The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set `i` to in order to yield the same output? Would you need to change `57616` to a different value?

A: 如果在大端序，`i` 的值应该为 `0x726c64` 才能保证与小端序输出的内容相同。不用该变 `57616` 的值。

Q6: In the following code, what is going to be printed after `'y='`? (note: the answer is not a specific value.) Why does this happen?

A: `y=` 之后的值为一个不确定的垃圾值。